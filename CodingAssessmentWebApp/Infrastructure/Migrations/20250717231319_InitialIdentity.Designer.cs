// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ClhAssessmentAppDpContext))]
    [Migration("20250717231319_InitialIdentity")]
    partial class InitialIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Clh_Project")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("BatchNumber")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("Batch", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.BatchAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("BatchId");

                    b.ToTable("BatchAssessment", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.InProgressAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentAssessmentProgressId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentAssessmentProgressId");

                    b.ToTable("InProgressAnswers", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.InProgressSelectedOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InProgressAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InProgressAnswerId");

                    b.ToTable("InProgressSelectedOptions", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.SelectedOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerSubmissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OptionId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnswerSubmissionId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionId1");

                    b.ToTable("SelectedOptions", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.StudentAssessmentProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CurrentSessionStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("LastSavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "AssessmentId")
                        .IsUnique();

                    b.ToTable("StudentAssessmentProgresses", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.TestCaseResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActualOutput")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("AnswerSubmissionId")
                        .HasColumnType("uuid");

                    b.Property<double>("EarnedWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("ExpectedOutput")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AnswerSubmissionId");

                    b.ToTable("TestCaseResults", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Answer", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.AnswerSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubmittedAnswer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("AnswerSubmission", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstructorId1")
                        .HasColumnType("uuid");

                    b.Property<double>("PassingScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TechnologyStack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("InstructorId1");

                    b.ToTable("Assessment", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.AssessmentAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssessmentAssignment", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<short>("Marks")
                        .HasColumnType("smallint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int?>("TechnologyStack")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("Question", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("TotalScore")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId1");

                    b.ToTable("Submission", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExpectedOutput")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<short>("Weight")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestCase", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entitties.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("Email");

                    b.ToTable("User", "Clh_Project");
                });

            modelBuilder.Entity("Domain.Entities.BatchAssessment", b =>
                {
                    b.HasOne("Domain.Entitties.Assessment", "Assessment")
                        .WithMany("BatchAssessment")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Batch", "Batch")
                        .WithMany("AssessmentAssignments")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Domain.Entities.InProgressAnswer", b =>
                {
                    b.HasOne("Domain.Entities.StudentAssessmentProgress", "StudentAssessmentProgress")
                        .WithMany("Answers")
                        .HasForeignKey("StudentAssessmentProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentAssessmentProgress");
                });

            modelBuilder.Entity("Domain.Entities.InProgressSelectedOption", b =>
                {
                    b.HasOne("Domain.Entities.InProgressAnswer", "InProgressAnswer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("InProgressAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InProgressAnswer");
                });

            modelBuilder.Entity("Domain.Entities.SelectedOption", b =>
                {
                    b.HasOne("Domain.Entitties.AnswerSubmission", "AnswerSubmission")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("AnswerSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.Option", null)
                        .WithMany("SelectedOptions")
                        .HasForeignKey("OptionId1");

                    b.Navigation("AnswerSubmission");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entities.TestCaseResult", b =>
                {
                    b.HasOne("Domain.Entitties.AnswerSubmission", "AnswerSubmission")
                        .WithMany("TestCaseResults")
                        .HasForeignKey("AnswerSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerSubmission");
                });

            modelBuilder.Entity("Domain.Entitties.Answer", b =>
                {
                    b.HasOne("Domain.Entitties.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("Domain.Entitties.Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entitties.AnswerSubmission", b =>
                {
                    b.HasOne("Domain.Entitties.Question", "Question")
                        .WithMany("AnswerSubmissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.Submission", "Submission")
                        .WithMany("AnswerSubmissions")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Entitties.Assessment", b =>
                {
                    b.HasOne("Domain.Entitties.User", null)
                        .WithMany("Assessments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Entitties.AssessmentAssignment", b =>
                {
                    b.HasOne("Domain.Entitties.Assessment", "Assessment")
                        .WithMany("AssessmentAssignments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.User", "Student")
                        .WithMany("AssessmentAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entitties.Option", b =>
                {
                    b.HasOne("Domain.Entitties.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entitties.Question", b =>
                {
                    b.HasOne("Domain.Entitties.Assessment", "Assessment")
                        .WithMany("Questions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Domain.Entitties.Submission", b =>
                {
                    b.HasOne("Domain.Entitties.Assessment", "Assessment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.User", null)
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitties.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entitties.TestCase", b =>
                {
                    b.HasOne("Domain.Entitties.Question", "Question")
                        .WithMany("Tests")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entitties.User", b =>
                {
                    b.HasOne("Domain.Entities.Batch", "Batch")
                        .WithMany("Students")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Domain.Entities.Batch", b =>
                {
                    b.Navigation("AssessmentAssignments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.InProgressAnswer", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("Domain.Entities.StudentAssessmentProgress", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Entitties.AnswerSubmission", b =>
                {
                    b.Navigation("SelectedOptions");

                    b.Navigation("TestCaseResults");
                });

            modelBuilder.Entity("Domain.Entitties.Assessment", b =>
                {
                    b.Navigation("AssessmentAssignments");

                    b.Navigation("BatchAssessment");

                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Domain.Entitties.Option", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("Domain.Entitties.Question", b =>
                {
                    b.Navigation("Answer")
                        .IsRequired();

                    b.Navigation("AnswerSubmissions");

                    b.Navigation("Options");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Domain.Entitties.Submission", b =>
                {
                    b.Navigation("AnswerSubmissions");
                });

            modelBuilder.Entity("Domain.Entitties.User", b =>
                {
                    b.Navigation("AssessmentAssignments");

                    b.Navigation("Assessments");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
